<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/mvc
    https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 配置SpringMVC -->
    <!-- 1.开启SpringMVC注解驱动 -->
    <mvc:annotation-driven />

    <!-- 2.静态资源默认servlet配置-->
    <!-- 如果将DispatcherServlet请求映射配置为"/"，
         则Spring MVC将捕获Web容器所有的请求，包括静态资源的请求，
         Spring MVC会将它们当成一个普通请求处理，因此找不到对应处理器将导致错误。
         在springMVC-servlet.xml中配置<mvc:default-servlet-handler />后，
         会在Spring MVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler          它会像一个检查员，对进入DispatcherServlet的URL进行筛查，
         如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理，
         如果不是静态资源的请求，才由DispatcherServlet继续处理。
    -->
    <mvc:default-servlet-handler/>

    <!-- 3.配置jsp 显示ViewResolver视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/WEB-INF/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <!-- 4.扫描web相关的bean（Controller层） -->
    <context:component-scan base-package="com.edu.controller" />

</beans>